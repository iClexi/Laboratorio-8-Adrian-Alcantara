# ===============================================
# PRÁCTICA 3: DESPLIEGUE DE WORDPRESS CON DOCKER COMPOSE
# ===============================================

# 1. Actualizar repos e instalar Docker Compose
sudo apt update && sudo apt install -y docker-compose

# 2. Crear carpeta del proyecto y entrar
mkdir wordpress-project
cd wordpress-project

# 3. Crear archivo docker-compose.yml con nano
sudo nano docker-compose.yml
# Contenido:
 version: '3.8'

services:
  db:
    image: mysql:5.7               # Usamos MySQL 5.7 por compatibilidad
    container_name: wp_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wp_user
      MYSQL_PASSWORD: wp_pass
    volumes:
      - db_data:/var/lib/mysql     # Guarda los datos para que no se pierdan

  wordpress:
    image: wordpress:latest
    container_name: wp_app
    depends_on:
      - db                         # Inicia primero la DB
    restart: unless-stopped
    ports:
      - "8000:80"                   # Acceso en puerto 8000
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wp_user
      WORDPRESS_DB_PASSWORD: wp_pass
      WORDPRESS_DB_NAME: wordpress
    volumes:
      - ./html:/var/www/html        # Carpeta local para ficheros WP

volumes:
  db_data:

# 4. Levantar el stack de WordPress
sudo docker-compose up -d

# 5. Verificar que los contenedores están corriendo
sudo docker ps

# 6. Abrir en el navegador y seguir asistente
# http://IP_DEL_SERVER:8000
# - Elegir idioma
# - Poner título del sitio
# - Crear usuario y contraseña de administrador
# - Guardar credenciales

# 7. (Opcional) Detener todo el stack
# sudo docker-compose down









# PRÁCTICA 3.5: DESPLIEGUE DE PORTAINER CON DOCKER COMPOSE
# ======================================================

# 1. Actualizar repos e instalar Docker Compose
sudo apt update && sudo apt install -y docker-compose

# 2. Crear carpeta del proyecto y entrar
mkdir portainer-project
cd portainer-project

# 3. Crear archivo docker-compose.yml con nano
sudo nano docker-compose.yml
# Contenido:
version: '3.8'

services:
  portainer:
    image: portainer/portainer-ce:latest    # Imagen de Portainer Community Edition
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9443:9443"                         # Interfaz HTTPS
      - "9000:9000"                         # Interfaz HTTP
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer_data:/data              # Datos persistentes de Portainer

# 4. Levantar el stack de Portainer
sudo docker-compose up -d

# 5. Verificar que el contenedor está corriendo
sudo docker ps

# 6. Abrir en el navegador y configurar
# http://IP_DEL_SERVER:9000
# - Crear usuario admin
# - Conectar Portainer al Docker local
# - Administrar contenedores, redes y volúmenes gráficamente

# 7. (Opcional) Detener todo el stack
# sudo docker-compose down
















# PRÁCTICA 3.9: DESPLIEGUE DE CUPS CON DOCKER COMPOSE
# ===============================================

# 1. Actualizar repos e instalar Docker Compose
sudo apt update && sudo apt install -y docker-compose

# 2. Crear carpeta del proyecto y entrar
mkdir cups-project
cd cups-project

# 3. Crear archivo docker-compose.yml con nano
sudo nano docker-compose.yml
# Contenido:
version: '3.8'

services:
  cups:
    image: olbat/cupsd                # Imagen de CUPS
    container_name: cups_server
    restart: unless-stopped
    ports:
      - "631:631"                     # Puerto estándar de CUPS
    environment:
      - CUPS_ADMIN_PASSWORD=admin123  # Contraseña del usuario admin
    volumes:
      - ./cups-data:/etc/cups         # Configuración persistente
      - ./cups-logs:/var/log/cups     # Logs persistentes

# 4. Levantar el stack de CUPS
sudo docker-compose up -d

# 5. Verificar que el contenedor está corriendo
sudo docker ps

# 6. Abrir en el navegador y configurar
# http://IP_DEL_SERVER:631/admin
# - Iniciar sesión con usuario: admin / contraseña: admin123
# - Añadir impresoras y gestionar colas de impresión

# 7. (Opcional) Detener todo el stack
# sudo docker-compose down
